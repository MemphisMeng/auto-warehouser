AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  Environment:
    Type: String
  Database:
    Type: String
  Table:
    Type: String
  OutputType:
    Type: String
    Default: athena
  RefreshType:
    Type: String
    Default: full
    AllowedValues:
      - full
      - incremental
      - view
  Statement:
    Description: the query statement (usually DQL) to collect a subset of data for the data table/view creation
    Type: String
Mappings:
  DefinitionMap:
    full:
      defintion: |-
        {
            "Comment": "A progress of the step function when it needs to (re)create a data table",
            "StartAt": "Starter",
            "States": {
                "Starter": {
                    "Type": "Pass",
                    "Result": {
                        "waitSeconds": 1,
                        "database": "${database}",
                        "table": "${table}",
                        "statement": "${statement}"
                    },
                    "Next": "DropTableTask"
                },
                "DropTableTask": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
                    "Parameters": {
                        "QueryString.$": "States.Format('DROP TABLE IF EXISTS {}.{}', $.database, $.table)",
                        "WorkGroup": "primary"
                    },
                    "ResultPath": "$.Query",
                    "Next": "DropTableStatusTask"
                },
                "DropTableStatusTask": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::athena:getQueryExecution",
                    "Parameters": {
                        "QueryExecutionId": "$.Query.QueryExecutionId"
                    },
                    "ResultPath": "$.Query",
                    "ResultSelector": {
                        "QueryExecutionId.$": "$.Query.QueryExecutionId",
                        "Status.$": "$.QueryExecution.Status.State"
                    },
                    "Next": "DropCompleteChoice"
                },
                "DropCompleteChoice": {
                    "Type": "Choice",
                    "Choices": [
                        {
                            "StringEquals": "FAILED",
                            "Variable": "$.Query.Status",
                            "Next": "DropFailureState"
                        },
                        {
                            "StringEquals": "SUCCEEDED",
                            "Variable": "$.Query.Status",
                            "Next": "DropSucceedResult"
                        }
                    ],
                    "Default": "DropWaitState"
                },
                "DropFailureState": {
                    "Type": "Pass",
                    "Result": "Dropping Table Failed!",
                    "End": true
                },
                "DropSucceedResult": {
                    "Type": "Pass",
                    "Result": "Dropping Table Succeeded!",
                    "Next": "CreateTableTask"
                },
                "CreateTableTask": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
                    "Parameters": {
                        "QueryString.$": "States.Format('CREATE TABLE IF NOT EXISTS {}.{} WITH (format = 'PARQUET') AS {}', $.database, $.table, $.statement)",
                        "WorkGroup": "primary"
                    },
                    "ResultPath": "$.Query",
                    "Next": "CreateStatusTask"
                },
                "CreateStatusTask": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::athena:getQueryExecution",
                    "Parameters": {
                        "QueryExecutionId": "$.Query.QueryExecutionId"
                    },
                    "ResultPath": "$.Query",
                    "ResultSelector": {
                        "QueryExecutionId.$": "$.Query.QueryExecutionId",
                        "Status.$": "$.QueryExecution.Status.State"
            
                    },
                    "Next": "CreateCompleteChoice"
                },
                "CreateCompleteChoice": {
                    "Type": "Choice",
                    "Choices": [
                      {
                        "StringEquals": "FAILED",
                        "Variable": "$.Query.Status",
                        "Next": "CreateTableFailure"
                      },
                      {
                        "StringEquals": "SUCCEEDED",
                        "Variable": "$.Query.Status",
                        "Next": "CreateTableResult"
                      }
                    ],
                    "Default": "CreateWaitState"
                },
                "CreateTableFailure": {
                    "Type": "Pass",
                    "Result": "Creating Table Failed!",
                    "End": true
                },
                "CreateTableResult": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::athena:getQueryResults",
                    "Parameters": {
                        "QueryExecutionId": "$.Query.QueryExecutionId"
                    },
                    "ResultPath": "$.QueryResults",
                    "Next": "SuccessState"
                },
                "CreateWaitState": {
                    "Type": "Wait",
                    "SecondsPath": "$.waitSeconds",
                    "Next": "CreateWaitTimeBackoffState"
                },
                "SuccessState": {
                    "Type": "Succeed"
                },
                "CreateWaitTimeBackoffState": {
                    "Type": "Task",
                    "Resource": "${backoff_function}",
                    "Parameters": {
                      "FunctionName": "function ARN"
                    },
                    "OutputPath": "$.Payload",
                    "Next": "CreateTableResult"
                },
                "DropWaitState": {
                    "Type": "Wait",
                    "SecondsPath": "$.waitSeconds",
                    "Next": "DropWaitTimeBackoffState"
                },
                "DropWaitTimeBackoffState": {
                    "Type": "Task",
                    "Resource": "${backoff_function}",
                    "Parameters": {
                      "FunctionName": "function ARN"
                    },
                    "OutputPath": "$.Payload",
                    "Next": "DropTableStatusTask"
                }
            }
        }
    incremental:
      defintion: |-
        {
          "Comment": "A progress of the step function when it needs to bring in new rows to an Athena table",
          "StartAt": "Starter",
          "States": {
            "Starter": {
              "Type": "Pass",
              "Result": {
                  "waitSeconds": 1,
                  "database": "${database}",
                  "table": "${table}",
                  "statement": "${statement}"
              },
              "Next": "CheckTableExistTask"
            },
            "CheckTableExistTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                  "QueryString.$": "States.Format('SELECT * FROM {}.{} LIMIT 1;', $.database, $.table)",
                  "WorkGroup": "primary"
              },
              "ResultPath": "$.Query",
              "Next": "CheckTableExistStatusTask"
            },
            "CheckTableExistStatusTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                  "QueryExecutionId": "$.Query.QueryExecutionId"
              },
              "ResultPath": "$.Query",
              "ResultSelector": {
                  "QueryExecutionId.$": "$.Query.QueryExecutionId",
                  "Status.$": "$.QueryExecution.Status.State"
              },
              "Next": "QueryCompleteChoice"
            },
            "QueryCompleteChoice": {
              "Type": "Choice",
              "Choices": [
                  {
                      "StringEquals": "FAILED",
                      "Variable": "$.Query.Status",
                      "Next": "TableNotFoundFailure"
                  },
                  {
                      "StringEquals": "SUCCEEDED",
                      "Variable": "$.Query.Status",
                      "Next": "TableFoundState"
                  }
              ],
              "Default": "QueryWaitState"
            },
            "TableNotFoundFailure": {
              "Type": "Pass",
              "Result": "Query failed!",
              "Next": "CreateTableTask"
            },
            "TableFoundState": {
              "Type": "Pass",
              "Result": "Table is found!",
              "Next": "InsertNewRowsTask"
            },
            "CreateTableTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                  "QueryString.$": "States.Format('CREATE TABLE IF NOT EXISTS {}.{} WITH (format = 'PARQUET') AS {}', $.database, $.table, $.statement)",
                  "WorkGroup": "primary"
              },
              "ResultPath": "$.Query",
              "Next": "CreateStatusTask"
            },
            "CreateStatusTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                  "QueryExecutionId": "$.Query.QueryExecutionId"
              },
              "ResultPath": "$.Query",
              "ResultSelector": {
                  "QueryExecutionId.$": "$.Query.QueryExecutionId",
                  "Status.$": "$.QueryExecution.Status.State"

              },
              "Next": "CreateCompleteChoice"
            },
            "InsertNewRowsTask": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                  "QueryString.$": "States.Format('INSERT INTO {}.{} {}', $.database, $.table, $.statement)",
                  "WorkGroup": "primary"
              },
              "ResultPath": "$.Query",
              "Next": "InsertNewRowsStatus"
            },
            "InsertNewRowsStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryExecution",
              "Parameters": {
                  "QueryExecutionId": "$.Query.QueryExecutionId"
              },
              "ResultPath": "$.Query",
              "ResultSelector": {
                  "QueryExecutionId.$": "$.Query.QueryExecutionId",
                  "Status.$": "$.QueryExecution.Status.State"

              },
              "Next": "InsertCompleteChoice"
            },
            "CreateCompleteChoice": {
              "Type": "Choice",
              "Choices": [
                {
                  "StringEquals": "FAILED",
                  "Variable": "$.Query.Status",
                  "Next": "CreateTableFailure"
                },
                {
                  "StringEquals": "SUCCEEDED",
                  "Variable": "$.Query.Status",
                  "Next": "CreateTableResult"
                }
              ],
              "Default": "CreateWaitState"
            },
            "InsertCompleteChoice": {
              "Type": "Choice",
              "Choices": [
                {
                  "StringEquals": "FAILED",
                  "Variable": "$.Query.Status",
                  "Next": "InsertFailure"
                },
                {
                  "StringEquals": "SUCCEEDED",
                  "Variable": "$.Query.Status",
                  "Next": "InsertTableResult"
                }
              ],
              "Default": "InsertWaitState"
            },
            "CreateTableFailure": {
              "Type": "Pass",
              "Result": "Creating Table Failed!",
              "End": true
            },
            "InsertFailure": {
              "Type": "Pass",
              "Result": "Inserting new records to Table Failed!",
              "End": true
            },
            "CreateTableResult": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryResults",
              "Parameters": {
                  "QueryExecutionId": "$.Query.QueryExecutionId"
              },
              "ResultPath": "$.QueryResults",
              "Next": "SuccessState"
            },
            "InsertTableResult": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:getQueryResults",
              "Parameters": {
                  "QueryExecutionId": "$.Query.QueryExecutionId"
              },
              "ResultPath": "$.QueryResults",
              "Next": "SuccessState"
            },
            "SuccessState": {
              "Type": "Succeed"
            },
            "CreateWaitState": {
              "Type": "Wait",
              "SecondsPath": "$.waitSeconds",
              "Next": "CreateWaitTimeBackoffState"
            },
            "InsertWaitState": {
              "Type": "Wait",
              "SecondsPath": "$.waitSeconds",
              "Next": "InsertWaitTimeBackoffState"
            },
            "CreateWaitTimeBackoffState": {
              "Type": "Task",
              "Resource": "${backoff_function}",
              "Parameters": {
                "FunctionName": "function ARN"
              },
              "OutputPath": "$.Payload",
              "Next": "CreateTableResult"
            },
            "InsertWaitTimeBackoffState": {
              "Type": "Task",
              "Resource": "${backoff_function}",
              "Parameters": {
                "FunctionName": "function ARN"
              },
              "OutputPath": "$.Payload",
              "Next": "InsertTableResult"
            },
            "QueryWaitState": {
              "Type": "Wait",
              "SecondsPath": "$.waitSeconds",
              "Next": "QueryWaitTimeBackoffState"
            },
            "QueryWaitTimeBackoffState": {
              "Type": "Task",
              "Resource": "${backoff_function}",
              "Parameters": {
                "FunctionName": "function ARN"
              },
              "OutputPath": "$.Payload",
              "Next": "CheckTableExistStatusTask"
            }
          }
        }
    view:
      defintion: |-
        {
            "Comment": "A progress of the step function when it needs to create a view on top of the databases",
            "StartAt": "Starter",
            "States": {
              "Starter": {
                "Type": "Pass",
                "Result": {
                    "waitSeconds": 1,
                    "database": "${database}",
                    "table": "${table}",
                    "statement": "${statement}"
                },
                "Next": "CreateViewTask"
              },
              "CreateViewTask": {
                "Type": "Task",
                "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
                "Parameters": {
                    "QueryString.$": "States.Format('CREATE OR REPLACE VIEW {}.{} AS {}', $.database, $.table, $.statement)",
                    "WorkGroup": "primary"
                },
                "ResultPath": "$.Query",
                "Next": "CreateStatusTask"
              },
              "CreateStatusTask": {
                "Type": "Task",
                "Resource": "arn:aws:states:::athena:getQueryExecution",
                "Parameters": {
                    "QueryExecutionId": "$.Query.QueryExecutionId"
                },
                "ResultPath": "$.Query",
                "ResultSelector": {
                    "QueryExecutionId.$": "$.Query.QueryExecutionId",
                    "Status.$": "$.QueryExecution.Status.State"

                },
                "Next": "CreateCompleteChoice"
              },
              "CreateCompleteChoice": {
                "Type": "Choice",
                "Choices": [
                    {
                        "StringEquals": "FAILED",
                        "Variable": "$.Query.Status",
                        "Next": "FailureState"
                    },
                    {
                        "StringEquals": "SUCCEEDED",
                        "Variable": "$.Query.Status",
                        "Next": "SuccessTask"
                    }
                ],
                "Default": "WaitState"
              },
              "FailureState": {
                "Type": "Pass",
                "Result": "Creating Table Failed!",
                "End": true
              },
              "SuccessTask": {
                "Type": "Task",
                "Resource": "arn:aws:states:::athena:getQueryResults",
                "Parameters": {
                    "QueryExecutionId": "$.Query.QueryExecutionId"
                },
                "ResultPath": "$.QueryResults",
                "Next": "SuccessState"
              },
              "SuccessState": {
                "Type": "Succeed"
              },
              "WaitState": {
                "Type": "Wait",
                "SecondsPath": "$.waitSeconds",
                "Next": "WaitTimeBackoffState"
              },
              "WaitTimeBackoffState": {
                "Type": "Task",
                "Resource": "${backoff_function}",
                "Parameters": {
                  "FunctionName": "function ARN"
                },
                "OutputPath": "$.Payload",
                "Next": "CreateStatusTask"
              }
            }
        }

Resources:
  # =========================================================================================
  # AWS LAMBDA FUNCTION
  # ========================================================================================= 
  AthenaStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${Environment}-${Database}.${Table}-statemachine'
      DefinitionString: !FindInMap [DefinitionMap, !Ref RefreshType, definition]
      DefinitionSubstitutions:
        database: !Ref Database
        table: !Ref Table
        statement: !Ref Statement
        backoff_function: !GetAtt function.Arn
      RoleArn: ''