{
    "Comment": "A progress of the step function when it needs to create a view on top of the databases",
    "StartAt": "Starter",
    "States": {
      "Starter": {
        "Type": "Pass",
        "Result": {
            "waitSeconds": 1,
            "database": "${database}",
            "table": "${table}",
            "statement": "${statement}",
            "refresh_type": "${refresh_type}"
        },
        "Next": "CreateViewTask"
      },
      "CreateViewTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
            "QueryString.$": "States.Format('CREATE OR REPLACE VIEW {}.{} AS {}', $.database, $.table, $.statement)",
            "WorkGroup": "primary"
        },
        "ResultPath": "$.Query",
        "Next": "CreateStatusTask"
      },
      "CreateStatusTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryExecution",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.Query",
        "ResultSelector": {
            "QueryExecutionId.$": "$.Query.QueryExecutionId",
            "Status.$": "$.QueryExecution.Status.State"

        },
        "Next": "CreateCompleteChoice"
      },
      "CreateCompleteChoice": {
        "Type": "Choice",
        "Choices": [
            {
                "StringEquals": "FAILED",
                "Variable": "$.Query.Status",
                "Next": "FailureState"
            },
            {
                "StringEquals": "SUCCEEDED",
                "Variable": "$.Query.Status",
                "Next": "SuccessTask"
            }
        ],
        "Default": "WaitState"
      },
      "FailureState": {
        "Type": "Pass",
        "Result": "Creating Table Failed!",
        "End": true
      },
      "SuccessTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryResults",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.QueryResults",
        "Next": "SuccessState"
      },
      "SuccessState": {
        "Type": "Succeed"
      },
      "WaitState": {
        "Type": "Wait",
        "SecondsPath": "$.waitSeconds",
        "Next": "WaitTimeBackoffState"
      },
      "WaitTimeBackoffState": {
        "Type": "Task",
        "Resource": "${backoff_function}",
        "Parameters": {
          "FunctionName": "function ARN"
        },
        "OutputPath": "$.Payload",
        "Next": "CreateStatusTask"
      }
    }
}