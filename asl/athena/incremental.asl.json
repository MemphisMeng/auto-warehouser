{
    "Comment": "A progress of the step function when it needs to bring in new rows to an Athena table",
    "StartAt": "Starter",
    "States": {
      "Starter": {
        "Type": "Pass",
        "Result": {
            "waitSeconds": 1,
            "database": "${database}",
            "table": "${table}",
            "statement": "${statement}"
        },
        "Next": "CheckTableExistTask"
      },
      "CheckTableExistTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
            "QueryString.$": "States.Format('SELECT * FROM {}.{} LIMIT 1;', $.database, $.table)",
            "WorkGroup": "primary"
        },
        "ResultPath": "$.Query",
        "Next": "CheckTableExistStatusTask"
      },
      "CheckTableExistStatusTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryExecution",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.Query",
        "ResultSelector": {
            "QueryExecutionId.$": "$.Query.QueryExecutionId",
            "Status.$": "$.QueryExecution.Status.State"
        },
        "Next": "QueryCompleteChoice"
      },
      "QueryCompleteChoice": {
        "Type": "Choice",
        "Choices": [
            {
                "StringEquals": "FAILED",
                "Variable": "$.Query.Status",
                "Next": "TableNotFoundFailure"
            },
            {
                "StringEquals": "SUCCEEDED",
                "Variable": "$.Query.Status",
                "Next": "TableFoundState"
            }
        ],
        "Default": "QueryWaitState"
      },
      "TableNotFoundFailure": {
        "Type": "Pass",
        "Result": "Query failed!",
        "Next": "CreateTableTask"
      },
      "TableFoundState": {
        "Type": "Pass",
        "Result": "Table is found!",
        "Next": "InsertNewRowsTask"
      },
      "CreateTableTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
            "QueryString.$": "States.Format('CREATE TABLE IF NOT EXISTS {}.{} WITH (format = 'PARQUET') AS {}', $.database, $.table, $.statement)",
            "WorkGroup": "primary"
        },
        "ResultPath": "$.Query",
        "Next": "CreateStatusTask"
      },
      "CreateStatusTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryExecution",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.Query",
        "ResultSelector": {
            "QueryExecutionId.$": "$.Query.QueryExecutionId",
            "Status.$": "$.QueryExecution.Status.State"

        },
        "Next": "CreateCompleteChoice"
      },
      "InsertNewRowsTask": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
        "Parameters": {
            "QueryString.$": "States.Format('INSERT INTO {}.{} {}', $.database, $.table, $.statement)",
            "WorkGroup": "primary"
        },
        "ResultPath": "$.Query",
        "Next": "InsertNewRowsStatus"
      },
      "InsertNewRowsStatus": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryExecution",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.Query",
        "ResultSelector": {
            "QueryExecutionId.$": "$.Query.QueryExecutionId",
            "Status.$": "$.QueryExecution.Status.State"

        },
        "Next": "InsertCompleteChoice"
      },
      "CreateCompleteChoice": {
        "Type": "Choice",
        "Choices": [
          {
            "StringEquals": "FAILED",
            "Variable": "$.Query.Status",
            "Next": "CreateTableFailure"
          },
          {
            "StringEquals": "SUCCEEDED",
            "Variable": "$.Query.Status",
            "Next": "CreateTableResult"
          }
        ],
        "Default": "CreateWaitState"
      },
      "InsertCompleteChoice": {
        "Type": "Choice",
        "Choices": [
          {
            "StringEquals": "FAILED",
            "Variable": "$.Query.Status",
            "Next": "InsertFailure"
          },
          {
            "StringEquals": "SUCCEEDED",
            "Variable": "$.Query.Status",
            "Next": "InsertTableResult"
          }
        ],
        "Default": "InsertWaitState"
      },
      "CreateTableFailure": {
        "Type": "Pass",
        "Result": "Creating Table Failed!",
        "End": true
      },
      "InsertFailure": {
        "Type": "Pass",
        "Result": "Inserting new records to Table Failed!",
        "End": true
      },
      "CreateTableResult": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryResults",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.QueryResults",
        "Next": "SuccessState"
      },
      "InsertTableResult": {
        "Type": "Task",
        "Resource": "arn:aws:states:::athena:getQueryResults",
        "Parameters": {
            "QueryExecutionId": "$.Query.QueryExecutionId"
        },
        "ResultPath": "$.QueryResults",
        "Next": "SuccessState"
      },
      "SuccessState": {
        "Type": "Succeed"
      },
      "CreateWaitState": {
        "Type": "Wait",
        "SecondsPath": "$.waitSeconds",
        "Next": "CreateWaitTimeBackoffState"
      },
      "InsertWaitState": {
        "Type": "Wait",
        "SecondsPath": "$.waitSeconds",
        "Next": "InsertWaitTimeBackoffState"
      },
      "CreateWaitTimeBackoffState": {
        "Type": "Task",
        "Resource": "${backoff_function}",
        "Parameters": {
          "FunctionName": "function ARN"
        },
        "OutputPath": "$.Payload",
        "Next": "CreateTableResult"
      },
      "InsertWaitTimeBackoffState": {
        "Type": "Task",
        "Resource": "${backoff_function}",
        "Parameters": {
          "FunctionName": "function ARN"
        },
        "OutputPath": "$.Payload",
        "Next": "InsertTableResult"
      },
      "QueryWaitState": {
        "Type": "Wait",
        "SecondsPath": "$.waitSeconds",
        "Next": "QueryWaitTimeBackoffState"
      },
      "QueryWaitTimeBackoffState": {
        "Type": "Task",
        "Resource": "${backoff_function}",
        "Parameters": {
          "FunctionName": "function ARN"
        },
        "OutputPath": "$.Payload",
        "Next": "CheckTableExistStatusTask"
      }
    }
  }